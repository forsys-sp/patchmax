% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_distance_mat.R
\name{calc_network_distance}
\alias{calc_network_distance}
\title{Compute all shortest distance between origin and destination nodes.}
\usage{
calc_network_distance(edgelist, from, to, aggregate_aux = FALSE, max_aux = Inf)
}
\arguments{
\item{edgelist}{Object generated by \link{make_edgelist} function.}

\item{from}{A vector of one or more vertices from which distances are calculated (origin).}

\item{to}{A vector of one or more vertices (destination).}

\item{aggregate_aux}{Logical. If \code{TRUE}, the additional weight is summed along shortest paths.}
}
\value{
Matrix of shortest distances.
}
\description{
Compute all shortest distance between origin and destination nodes.
}
\details{
\code{calc_network_distance()} recursively perform Dijkstra for each \code{from} nodes.

Shortest path is always computed according to the main edge weights, corresponding to the 3rd column of \code{df} argument in \code{make_edgelist()} function.
If \code{aggregate_aux} argument is \code{TRUE}, the values returned are the sum of auxiliary weights along shortest paths.
}
